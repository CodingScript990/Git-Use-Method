Git 핵심 쏙쏙

[1주차]

- Error에 익숙해지기!
- 구글링을 많이해보기!
- 시도시에 해결되는 것들을 자주 시도해보기!
- 해결시에도 메모해보기!
- 1주차 : 버전관리, commit, pull, push => Git 사용법
- 2주차 : Issue, branch, merge => 협업을 위한 기초
- 3주차 : github 페이지 관리해보고, 오픈소스까지 기여해보기!

✔ Git?

- Git은 프로젝트의 버전 관리를 위한 도구이다.
- Git을 사용하면 무슨 자겅버을 했는지도 History로 한 눈에 볼 수 있다.
- Git은 작업단위도 나뉠 수 있다. 프로래밍이 아까는 되었는데 지금은 코드 고치니 프로젝트가
  동작을 안하는 순간이 올때나 내가 어떤 부분에서 에러를 내었는지 찾지 못할때 이렇게 git에서
  어떤 것을 내가 작업중이었으며, 어떤 부분에서 에러가 났는지도 알 수 있게 해준다.
- Git은 협업에 최적합하다!! 어떤 프로젝트를 작업중이며 작업을 하나로 합치는 것도 편하며,
  수정했는지도 한눈에파악하기 쉽다. 그러나 git을 사용하지 않는 경우에는 최악은 파일을 덮어
  쓰는 최악의 순간이 온다.
- Git은 모든 파일의 내용을 자동 비교를 해준다.
- 그러나 이미지파일, Word파일, PDF파일, 엑셀 파일은 여러가지로 설정을 해줘야 한다. 기본설정으로
  이런 파일들은 파일의 크기가 변했구나 정도만 알 수 있다.

✔ GitHub

- git과 github은 다르다. github은 git원격 저장소 + Git으로 할 수 있는 커뮤니티 기능 서비스이다.
- 즉, Github은 Git으로된 프로젝트 저장 공간을 제공하고, Github에는 협업하기 위한 기능들을 가지고 
  있다.
- Gihub 외에도 Git프로젝트 저장소 + 프로젝트 관리하는 기능을 제공하는 곳으로는 대표적으로 gitlab,
  bitbucket 등의 서비스가 있다.

✔ Sourcetree

- git을 쉽게 사용할 수 있는 도구이다. 워드 파일을 편집할 때 MS office를 사용하는 것과 같다!
- 전 세계에서 가장 많이 사용되는 git도구중 하나이다. 그리고 스스로 공부할 때 참고할만한 자료가 많다
- 입문자부터 중급자까지 사용할 수 있게 여러가지 기능을 제공한다.
- git은 사용패턴을 이해하고 익숙해지는 것이지 사용법을 암기하고 그런 것이 아니다!
- git은 여러가지 방법으로 사용할 수 있다. 터미널로 명령어를 입력할 수 있다.(CLI라고 한다.)

✔ 개발자 / IT 조직에서의 Git & Github

- git과 같은 버전관리 툴을 필수적으로 사용한다.
- 프로젝트 작업내역을 관리한다.
- 여러 개발자들이 하나의 제품을 만들 때 각자 작업한 코드를 합친다.
- 버그 리포트 받고 해결한다 >> 이전에는 작업때 괜찮았으나 현재는 안될때 이전에 저장소에 저장한 것을
  다시 불러와서 수정작업을 하는 경우도 종종 발생한다.
- github에 있는 저장소를 웹 사이트로 만들때
