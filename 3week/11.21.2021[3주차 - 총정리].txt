Git 핵심 쏙쏙

[3주차]

✔ 총정리

 - 1주차 Git 용어정리
  -> Version 관리, commit, pull, push  +TIL

 - 2주차 Git 용어정리
  -> Issue, branch, merge

 - 3주차 Git 용어정리
  -> 협업을 위한 commit관리 : PR(작업내역 반영), commit return : amend, revert, reset, stash(임시 저장)
  -> Git project : 협업매너 : commit MSG convention, gitignore, README
  -> Open soure INFO 탐색하고 즐기기! : 개발자스럽게 진짜 개발 정볼르 찾는 방법, github exprore, open source
  -> Gihub 개발자인 나를 나타내자 - 포트폴리오 : 개발자들 명함과 이력서에 Github주소가 들어가는이유! Github에서 
   profile, project info, deveolper blog 작성하는 방법! : github profile, repo info, github page

✔ 1주차 정리

 - 버전 관리 : 프로젝트 상태가 변경되는 정보를 알고 있다는 것인데, Git은 가장 널리 쓰이는 버전관리도구 중에 하나로
  commit을 사용해서 버전이 달라지는 것을 관리한다.
 - git initialize : 컴퓨터에 있는 프로젝트를 git이 관리하는 프로젝트로 만들기
 - commit : 현재 프로젝트의 상태를 저장하는 것이다.
 - add(staging) : commit에 반영할지 안할지는 파일 단위로 선택할 수 있다. commit에 반영할 파일을 선택하는 것을 말한다.
 - commit history : commit 한 순서대로 리스트를 보여줌
 - repo : local에 저장되어 있는 Git저장소를 local repo라고 하고 Github처럼 다른 곳에서 접속할 수 있는 공간에 저장되
  어 잇는 것을 remote repo라고 한다.
 - Tracking : local repo branch와 remote repo branch를 연결한다!
 - push : local repo branch의 commit들을 remote repo branch에 반영하기가 push!
 - pull : remote repo branch의 commit들을 local repo bracnh로 반영하는게 pull!
 - clone : remote repo를 local에 가져와서 초기 repo세팅하는 것을 clone이라 한다!

 -> 정리!!
  remote repo에 변경사항이 생겼다면 먼저 pull을하고 local repo에서 작업하면 많은 경우 충돌을 피할 수 있다!
  1. remote repo와 local repo의 상태를 똑같이 맞춰주고 local repo에 원격 repo작업내역을 가져온다.(pull)
  2. local repo의 작업 내용을 저장한다(commit)
  3. remote repo에 local repo내용을 반영한다(push)

✔ 2주차 정리

 - 협업할때는 단계별로 진행한다.
  
  1단계 - Issue : 누가 이작업을 할것인가?
  2단계 - Branch : 각자 맡은 것을 작업한다.
  3단계 - Merge : 각자 작업을 프로젝트에 합친다.
  (In some cases) - PR AF(after) merge : 작업한 내용을 리뷰하고 최종적으로 프로젝트에 반영한다.

 - Issue : 내가 할 작업, 기능 추가, 버그 리포트 등 여러 방식으로 사용할 수 있다.
 - Branch : 협업을 위해 issue를 만들어 누가 작업할지 정하고, branch를 만들어 작업할 공간을 나눈다.
 - Branch : 특정 commit에서 갈라져나와 작업하고, 기능별로 이름을 만들어주어 branch 작업해준다.
 - checkout : 작업할 branch로 바꾸는 것을 checkout이라한다. checkout된 branch에만 commit이 반영된다.
 - Merge : branch의 작업 내역 commit들을 다른 branch로 반영하는 것을 말한다. 개발할때는 기준이 되는 기본 branch를 
  정해놓고 해당 branch에 내용을 merge한다. 
 - branch명은 규칙을 가지고 잘 이름 지으면 프로젝트관리가 쉬워진다. 작업이 완료되면 작업한 branch는 보통 삭제한다.
  나중에 branch 설정이 꼬일 수 있는 것을 방지하기 위함이다.
 - 각 작업 branch에서 작업할 때는 다른 branch의 영향을 받지 않고 독립적으로 작업할 수 있다. 
 - Merge하는 과정에서 같은 파일이 동일한 부분이 수정된 게 발견되면 Merge conflict가 발생한다. Git은 근데 충돌을
  파악할 수 있도록 파일 내용을 고쳐서 충돌 내역을 보여준다.
 - conflict를 수정하려면 최종적으로 반영할 내역을 고친 후에 merge commit하면된다. tracking한다는 것은 local repo와
  remote repo의 특정 branch를 연결해주는 것이다.
 - push와 pull은 기본적으로 tracking되고 있는 branch를 기준으로 commit내역을 반영한다.

✔ 3주차 정리

 - Commit 관리하기!
  -> 작업하다가 commit메시지에 오타가 났거나 파일을 까먹고 add하는 경우 최신의 commit을 수정하는 것을 amend라고 하고
   amend로는 가장 최신의 commit만 고칠 수 있다는 점을 유의할 것! 
 - 다른 사람들과 같이 협업하고 있다면 어떤 내용이 되돌려졌는지 기록을 남기는 것도 중요하다. 어떤 내용을 되돌렸는지 
  새로운 commit을 남기는 것을 revert라고 하며 최신 commit뿐만 아니라 이전에 했던 commit도 revert로 되돌리기가 가능하다.
 - reset은 commit했던 작업내역을 말 그래도 reset시키는 것이다.
 - stash는 프로젝트의 변경상항을 임시적으로 보관할 때 말한다. 다른 branch로 checkout하는 경우 현재 branch의 변경사항
  이 사라진다. 그것을 방지하고자하여 보관해두고 싶을때 stash를 사용한다.

 🟥 의사소통편
 
  - commit메시지를 작성하는 규칙을 commit message convention이라고 한다. 서로 조직에서 합의한 규칙을 convention이라고
   한다.
  - 좋은 commit msg, 단위로 작성하면 :
   1. commit history(commit log)만 보고 알 수 있다.
   2. bug를 찾을 때와 code 고치기가 쉽다.
   3. 다른 사람이 code를 review할 때 편하다
  - 보통 code review는 PR한 내역에서 댓글을 달면서 리뷰를 남기는 방식을 많이 사용한다.


 🟥 Code Review

  - code 품질을 높일 수 있다.
  - 다른 사람의 눈으로 bug를 빠르게 발견할 수 있다.
  - 서로의 지식을 나누면서, 더 나은 방법을 찾아낼 수 있다.
  - 공유하거나 공개되면 안되는 파일들은 공개된 repo에 공개되면 안되니깐 Git에서 파일들을 없는 것처럼 무시하게 하는
   설정이 .gitignore이라고 있다.
  - Github프로젝트에서도 README.md를 만들어 프로젝트 소개글을 적어둔다. 프로젝트의 어마어마하게 많은 파일들을 하나씩
   다 읽어볼 수 없으니 꼭 소개해주는 파일은 있어야한다!

 🟥 Github에서 정보 얻기

  - Github에서 다른 사람 코드들을 맘껏 탐색하고, 프로필 소개 페이지 작성, Github페이지 만들기도 해보는 것이 좋다.
  - Open source란 누구나 프로젝트를 사용하고, 수정하고, 배포할 수 있는 프로젝트를 의미했다. 많은 사람들이 프로젝트에
   contribution하면서 발전시켜나가는 것이 open source만의 매력이다.

 🟥 Git활용

  - 가장 좋은건 일상생활에서 쓸 수 있는 repo를 만드는 것도 좋다. Github pages를 발전시켜서 개발 블로그로 만들 수도 
   있고, TIL repo에 매일매일 알게된 내용들을 commit하고 push!
  - Git 개념과 사용법이 궁금하면 공식 책보거나 구글링을 통해서 차근차근 익혀가는 것이 좋다.
  - Git 명령줄(CLI)를 사용!할때 때론 어렵기도 하다. 그렇지만 하다보면 뭔가 해커같아서 좋죠?
  - Terminal에서 commmand Line으로 컴퓨터에게 명령을 내려 실해시키고 컴퓨터에게 메시지를 받는 것을 말한다. 명령줄로
   컴퓨터와 Interaction하는 것을 CLI(Command Line Interface)라고 부른다.
  - 꼭 CLI에서 다루지 않더라도 환경에 맞추어서 사용하면된다. 